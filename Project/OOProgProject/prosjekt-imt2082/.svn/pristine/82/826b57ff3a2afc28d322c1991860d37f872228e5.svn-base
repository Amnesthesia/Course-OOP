/****************************************************************************
	class:        Hotell
	read:         <forkortet hotellnavn>.dta
	write:        <forkortet hotellnavn>.dta
	author:       ...

	description:  ...
*****************************************************************************/

/* --------------------------------------
           INCLUDED DEPENDENCIES
   -------------------------------------*/
#include <iostream>
#include <string>
#include <fstream>

#include "hotellClass.h"
#include "enums.h"
#include "romSingelClass.h"
#include "romDobbelClass.h"
#include "romSuiteClass.h"

/* --------------------------------------
             USED NAMESPACE
   -------------------------------------*/
using namespace std;

/* --------------------------------------
		   FUNCTION DEFINITIONS
   -------------------------------------*/
Hotell::Hotell()
{
	availableRooms = new List[3];
	//rooms = new List[3];

	//rooms[singel].is_empty();
}

Hotell::Hotell(string fileName)
{
	ifstream inFile(fileName, ios::in);

	rooms[singel] = new List(Sorted);
	rooms[dobbel] = new List(Sorted);
	rooms[suite] = new List(Sorted);

	int numberOfRooms[3];
	facilityDescriptions = new string[MAX_FASILITETER];

	getline(inFile, name);
	inFile >> streetAddress >> postAddress >> mailAddress;
	inFile >> phoneNumber >> faxNumber >> fileName >> breakfastCost;
	inFile >> additionalBedCost >> numberOfFacilities;
	for (int i = 1; i <= numberOfFacilities; i++)
	{
		inFile >> facilityDescriptions[i];
	}
	inFile >> numberOfRooms[1];
	for (int i = 1; i <= numberOfRooms[1]; i++)
	{
		int nr;
		inFile >> nr;
		Singel* nyttRom = new Singel(inFile, nr);
		rooms[singel] ->add(nyttRom);
	}
	inFile >> numberOfRooms[2];
	for (int i = 1; i <= numberOfRooms[2]; i++)
	{
		int nr;
		inFile >> nr;
		Dobbel* nyttRom = new Dobbel(inFile, nr);
		rooms[dobbel] ->add(nyttRom);
	}
	inFile >> numberOfRooms[3];
	for (int i = 1; i <= numberOfRooms[3]; i++)
	{
		int nr;
		inFile >> nr;
		Suite* nyttRom = new Suite(inFile, nr);
		rooms[suite] ->add(nyttRom);
	}
	inFile.close();
}

Hotell::~Hotell()
{
	delete [] availableRooms;
}

/******************************************************************************
	name:        getAvailableRoom(int)
	description: Returns a randomly selected number of an available room of the 
	             selected type
	parameters:  int type
	returns: 	 0 if no room of selected category is available,
	            -1 if no rooms at all are available.
******************************************************************************/

int Hotell::getAvailableRoom(int type)
{
    // Return -1 if no rooms whatsoever are available at this hotel
    if(availableRooms[singel].is_empty() && availableRooms[dobbel].is_empty() && availableRooms[suite].is_empty())
        return -1;

    // Return 0 if no room of the selected type is available at this hotel
    if(availableRooms[type].is_empty())
        return 0;


    // ... and return a random element from our list like so:
    Num_element* roomnum = (Num_element*) availableRooms[type].remove_no(1);

    return 0;
}

int Hotell::setAvailableRoom(int roomID)
{

	return 0;
}

void Hotell::displayHotelData()
{
	cout << "Hotell: " << name << endl;


	cin.get();
}